@page "/categorias/{message?}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]
@inject HttpClient Http

<h2>Categorias</h2>

<p>
    <a href="/categorias/novo">Nova Categoria</a>
</p>
@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-success" role="alert">
        @Message
    </div>
}
@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-pagination">
        <thead>
            <tr>
                <th>
                    Nome
                </th>
                <th>
                    Ordem
                </th>
                <th>
                    Categoria Pai
                </th>
                <th>
                    Meta Description
                </th>
                <th>
                    Titulo
                </th>
                <th>
                    Nº Tipos de Produtos
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in categories)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        @item.Order
                    </td>
                    <td>
                        @item.Parent?.Name
                    </td>
                    <td>
                        @item.MetaDescription
                    </td>
                    <td>
                        @item.Title
                    </td>
                    <td>
                        <a href="#" asp-route-id="@item.Id">Editar</a> |
                        <a href="#" asp-route-id="@item.Id">Detalhes</a> |
                        <a href="#" asp-route-id="@item.Id">Remover</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private CategoryViewModel[] categories;

    [Parameter]
    public string Message { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<CategoryViewModel[]>("Categories");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}