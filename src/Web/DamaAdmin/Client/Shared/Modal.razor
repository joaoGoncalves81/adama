@using System.Reflection; 
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (DisplayItems == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <dl class="dl-horizontal">
                        @foreach (var item in DisplayItems)
                        {
                            <dt>
                                @item.DisplayText
                            </dt>
                            <dd>
                                @item.Value
                            </dd>
                        }
                    </dl>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
            </div>
        </div>
    </div>
</div>
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {


    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public string ModalTitle = "";
    public List<(string DisplayText, string Value)> DisplayItems;

    public void Open<T>(string title, T model)
    {
        ModalTitle = title;
        DisplayItems = GetNamesAndValues(model);

        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public List<(string, string)> GetNamesAndValues<T>(T model)
    {
        var props = typeof(T).GetProperties();
        List<(string, string)> list = new();
        foreach (var prop in props)
        {
            if (prop != null)
            {
                string displayName = prop.Name;
                System.Reflection.MemberInfo propInfo = typeof(T).GetProperty(prop.Name);
                if (propInfo != null)
                {
                    if (propInfo.GetCustomAttribute(typeof(System.ComponentModel.DataAnnotations.DisplayAttribute)) is
                       System.ComponentModel.DataAnnotations.DisplayAttribute displayAttribute)
                    {
                        displayName = $"{displayAttribute.Name} ";
                    }
                }
                var val = prop.GetValue(model)?.ToString() ?? "";
                list.Add((displayName, val));

            }
        }
        return list;
    }
}